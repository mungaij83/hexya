// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package loader

import (
	"github.com/hexya-erp/hexya/src/models"
)

// ------- MODEL ---------

// CompanyModel is a strongly typed model definition that is used
// to extend the Company model or to get a CompanySet through
// its NewSet() function.
//
// To get the unique instance of this type, call Company().
type ModelDefinition[M Model] struct {
	*models.Model
}

// NewSet returns a new CompanySet instance in the given Environment
func (md ModelDefinition[M]) NewSet(env models.Environment) models.RecordSet {
	return env.Pool(md.Name())
}
func (md ModelDefinition[M]) Create(env models.Environment, data M) *models.RecordCollection {
	return md.Model.Create(env, data)
}
func (md ModelDefinition[M]) wrapBaseType(coll *models.RecordCollection) M {
	return nil
}

// Create creates a new Company record and returns the newly created
// CompanySet instance.
func (md ModelDefinition[M]) CreateModel(env models.Environment, data M) M {
	dd := md.Create(env, data)
	if dd != nil {
		return nil
	}
	return md.wrapBaseType(dd)
}

// Search searches the database and returns a new CompanySet instance
// with the records found.
func (md ModelDefinition[M]) Search(env models.Environment, cond models.Conditioner) *models.RecordCollection {
	return md.Model.Search(env, cond)
}

// Browse returns a new RecordSet with the records with the given ids.
// Note that this function is just a shorcut for Search on a list of ids.
func (md ModelDefinition[M]) Browse(env models.Environment, ids []int64) *models.RecordCollection {
	return md.Model.Browse(env, ids)
}

// BrowseOne returns a new RecordSet with the record with the given id.
// Note that this function is just a shorcut for Search on the given id.
func (md ModelDefinition[M]) BrowseOne(env models.Environment, id int64) *models.RecordCollection {
	return md.Model.BrowseOne(env, id)
}

// NewData returns a pointer to a new empty CompanyData instance.
//
// Optional field maps if given will be used to populate the data.
func (md ModelDefinition[M]) NewData(fm ...models.FieldMap) M {
	return models.NewModelData(new(M), fm...)
}

// Fields returns the Field Collection of the Company Model
func (md ModelDefinition[M]) Fields() models.FieldsCollection {
	return models.FieldsCollection{
		md.Model.Fields(),
	}
}

// Methods returns the Method Collection of the Company Model
func (md ModelDefinition) Methods() company.MethodsCollection {
	return company.MethodsCollection{
		MethodsCollection: md.Model.Methods(),
	}
}

// Underlying returns the underlying models.Model instance
func (md ModelDefinition[M]) Underlying() *models.Model {
	return md.Model
}

// Coalesce takes a list of CompanySet and return the first non-empty one
// if every record set is empty, it will return the last given
func (md ModelDefinition[M]) Coalesce(lst ...m.CompanySet) m.CompanySet {
	var last m.CompanySet
	for _, elem := range lst {
		if elem.Collection().IsNotEmpty() {
			return elem
		}
		last = elem
	}
	return last
}

// Company returns the unique instance of the CompanyModel type
// which is used to extend the Company model or to get a CompanySet through
// its NewSet() function.
func NewModelDefinition[M Model](mdl *models.Model) ModelDefinition[M] {
	return ModelDefinition[M]{
		Model: models.Registry.MustGet(mdl.Name()),
	}
}
